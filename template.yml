AWSTemplateFormatVersion: 2010-09-09
Description: >-
  auth
Transform:
- AWS::Serverless-2016-10-31
Resources:

  SetupCode:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/workerSetup/main.main
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Add workers to worker list 
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WorkerTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref WorkerTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /workerSetup
            Method: POST

  getAuthCode:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/auth/getAuthCode.getAuthCode
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Get authentication code
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AuthTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref AuthTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /getAuthCode
            Method: POST

  getNewsfeed:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/newsfeed/get-newsfeed.getNewsfeed
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Get newsfeed posts 
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NewsFeedTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref NewsFeedTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /newsfeed/{workspaceId}
            Method: GET

  postNewsfeed:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/newsfeed/post-newsfeed.postNewsfeed
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Post newsfeed posts
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NewsFeedTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref NewsFeedTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /newsfeed/{workspaceId}
            Method: POST

  getMeeting:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/appointment/get-meeting.getAppointment
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Get meeting
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MeetingTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref MeetingTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /meeting/{workspaceid}
            Method: GET
          
  postMeeting:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/appointment/post-meeting.postmeeting
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Post meeting
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MeetingTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref MeetingTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /meeting
            Method: POST

  removeMeeting:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/appointment/remove-meeting.removemeeting
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Remove meeting
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MeetingTable
        - DynamoDBCrudPolicy:
            TableName: !Ref StagingTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref CurrentTaskTable
          SAMPLE_TABLE_TWO: !Ref StagingTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /meeting/{workspaceid}
            Method: POST

  getComment:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/comment/get-comment.getComment
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Get comments
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CommentsTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref CommentsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /comment/{postid}
            Method: GET

  getWorker:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/worker/workerInfo.worker
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Get workers
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WorkerTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref WorkerTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /worker/{workspaceid}
            Method: GET

  postComment:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/comment/post-comment.postComment
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Post comment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CommentsTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref CommentsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /comment/{postid}
            Method: POST

  addTask:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/mytasks/addTask.addTask
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Assign new task 
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CurrentTaskTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref CurrentTaskTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /addTask
            Method: POST

  myTaskAll:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/mytasks/myTaskAll.myTaskAll
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Get my all tasks
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CurrentTaskTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref CurrentTaskTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /task/{workerId}
            Method: GET

  myTaskDetail:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/mytasks/myTaskDetail.myTaskDetail
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Take details of a task
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CurrentTaskTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref CurrentTaskTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /task/taskDetail/{taskId}
            Method: GET

  submitReport:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/report/submitReport.submitReport
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Submit report
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CurrentTaskTable
        - DynamoDBCrudPolicy:
            TableName: !Ref StagingTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref CurrentTaskTable
          SAMPLE_TABLE_TWO: !Ref StagingTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /submitReport/{taskId}
            Method: POST
  
  decideReport:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/report/decision.decision
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Classify report
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CurrentTaskTable
        - DynamoDBCrudPolicy:
            TableName: !Ref StagingTable
        - DynamoDBCrudPolicy:
            TableName: !Ref OldTaskTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref StagingTable
          SAMPLE_TABLE_TWO: !Ref OldTaskTable
          SAMPLE_TABLE_THREE : !Ref CurrentTaskTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /decideReport/{taskId}
            Method: POST

  getHistory:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/oldtasks/getHistory.getHistory
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Get Task History
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OldTaskTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref OldTaskTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /getHistory/{workerId}
            Method: GET

  AuthTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: AuthTableAWS
      PrimaryKey:
        Name: phone
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  CurrentTaskTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: currentTaskAWS
      PrimaryKey:
        Name: taskId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  
  OldTaskTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: oldTaskAWS
      PrimaryKey:
        Name: taskId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  MeetingTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: meetingTableAWS
      PrimaryKey:
        Name: meetingId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  StagingTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: StagingAWS
      PrimaryKey:
        Name: taskId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  WorkerTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: WorkerTableAWS
      PrimaryKey:
        Name: workerId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  NewsFeedTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: NewsfeedTableAWS
      PrimaryKey:
        Name: postId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  CommentsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: CommentsTableAWS
      PrimaryKey:
        Name: commentId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"