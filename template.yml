# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  auth

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  getAuthCode:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/auth/getAuthCode.getAuthCode
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: GET AUTH CODE AND REPLACE NEW ONE 
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AuthTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref AuthTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /getAuthCode
            Method: POST

  getNewsfeed:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/newsfeed/get-newsfeed.getNewsfeed
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: GET DATA FOR NEWSFEED
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref NewsFeedTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref NewsFeedTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /newsfeed/{workspaceid}
            Method: GET


  postNewsfeed:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/newsfeed/post-newsfeed.postNewsfeed
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: POST DATA FOR NEWSFEED
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref NewsFeedTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref NewsFeedTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /newsfeed/{workspaceid}
            Method: POST

    # addTask:
    # Type: AWS::Serverless::Function
    # Properties:
    #   Handler: src/mytasks/addTask.addTask
    #   Runtime: nodejs12.x
    #   MemorySize: 128
    #   Timeout: 100
    #   Description: ASSIGN NEW TASK 
    #   Policies:
    #     # Give Create/Read/Update/Delete Permissions to the SampleTable
    #     - DynamoDBCrudPolicy:
    #         TableName: !Ref CurrentTaskTable
    #   Environment:
    #     Variables:
    #       # Make table name accessible as environment variable from function code during execution
    #       SAMPLE_TABLE: !Ref CurrentTaskTable
    #   Events:
    #     Api:
    #       Type: Api
    #       Properties:
    #         Path: /task/{workspaceid}
    #         Method: POST
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  AuthTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: AuthTableT
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  CurrentTaskTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: currentTask
      PrimaryKey:
        Name: taskId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  WorkerTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: WorkerTable
      PrimaryKey:
        Name: workerId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  NewsFeedTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: NewsfeedTableT
      PrimaryKey:
        Name: postId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
